plugins {
    id 'java-library'
}

group = "com.fenoxo.cocx"
version = "1.0.0"

// Define properties
def FLEX_HOME = project.findProperty("env.FLEX_HOME") ?: System.getenv("FLEX_HOME")
def mainSrcDir = file("${projectDir}/classes")
def libDir = file("${projectDir}/lib/bin")
def buildDir = file("${projectDir}/target")

// Setup Flex and FlexUnit tasks
dependencies {
    implementation files("${FLEX_HOME}/lib/flex-compiler-oem.jar")
}
// Define tasks
init {
    doLast {
        delete buildDir
        mkdir buildDir
    }
}

tasks.create(name: 'buildGameBinary', dependsOn: 'init') {
    doLast {
        def debugFlag = project.hasProperty('debugFlag') ? project.debugFlag : 'false'
        def releaseFlag = project.hasProperty('releaseFlag') ? project.releaseFlag : 'false'
        def airFlag = project.hasProperty('airFlag') ? project.airFlag : 'false'
        def standaloneFlag = project.hasProperty('standaloneFlag') ? project.standaloneFlag : 'false'
        def binaryName = project.hasProperty('binaryName') ? project.binaryName : 'output.swf'

        javaexec {
            main = 'flex2.tools.Compiler'
            classpath = configurations.implementation
            args(
                    "${mainSrcDir}/classes/CoC.as",
                    '-output', "${buildDir}/${binaryName}",
                    '-static-rsls', 'true',
                    '-load-config', "${FLEX_HOME}/frameworks/flex-config.xml",
                    '-source-path', "${FLEX_HOME}/frameworks",
                    '-source-path', "${mainSrcDir}",
                    '-compiler.debug', debugFlag,
                    '-library-path', "${FLEX_HOME}/frameworks/libs/*.swc",
                    '-library-path', "${FLEX_HOME}/frameworks/libs/air/*.swc",
                    '-library-path', "${libDir}/*.swc",
                    '-define', "CONFIG::release,${releaseFlag}",
                    '-define', "CONFIG::debug,${debugFlag}",
                    '-define', "CONFIG::AIR,${airFlag}",
                    '-define', "CONFIG::STANDALONE,${standaloneFlag}",
                    '-swf-version', '41'
            )
        }
    }
}


// Define createAirApk closure
def createAirApk(specialArch) {
    tasks.create(name: "createAirApk${specialArch}", dependsOn: 'airMobile') {
        doLast {
            exec {
                executable = "${FLEX_HOME}/bin/adt"
                args(
                        '-package',
                        '-target', 'apk-captive-runtime',
                        '-arch', specialArch,
                        '-storetype', 'pkcs12',
                        '-keystore', "${projectDir}/coc.keystore",
                        '-storepass', '123456',
                        "${buildDir}/CoC-Mobile-${specialArch}.apk",
                        "${projectDir}/CoC-Android.xml",
                        '-C', buildDir, 'CoC-Mobile.swf',
                        '-C', projectDir, 'devTools/icons'
                )
            }
        }
    }
}

tasks.create(name: 'airApkLin') {
    dependsOn 'airMobile'
    createAirApk('armv7')
    createAirApk('armv8')
}

tasks.create(name: 'release', dependsOn: 'init') {
    doLast {
        tasks.buildGameBinary.debugFlag = 'false'
        tasks.buildGameBinary.releaseFlag = 'true'
        tasks.buildGameBinary.airFlag = 'false'
        tasks.buildGameBinary.standaloneFlag = 'true'
        tasks.buildGameBinary.binaryName = 'CoC-release.swf'
    }
}

tasks.create(name: 'debug', dependsOn: 'init') {
    doLast {
        tasks.buildGameBinary.debugFlag = 'true'
        tasks.buildGameBinary.releaseFlag = 'false'
        tasks.buildGameBinary.airFlag = 'false'
        tasks.buildGameBinary.standaloneFlag = 'true'
        tasks.buildGameBinary.binaryName = 'CoC-debug.swf'
    }
}

tasks.create(name: 'airMobile', dependsOn: 'init') {
    doLast {
        tasks.buildGameBinary.debugFlag = 'true'
        tasks.buildGameBinary.releaseFlag = 'true'
        tasks.buildGameBinary.airFlag = 'true'
        tasks.buildGameBinary.standaloneFlag = 'false'
        tasks.buildGameBinary.binaryName = 'CoC-Mobile.swf'
    }
}

tasks.create(name: 'all') {
    dependsOn 'init', 'release', 'debug', 'airMobile'
    description = 'Build all swf versions'
}

tasks.create(name: 'allCI') {
    dependsOn 'init', 'release', 'debug', 'makeMobileAir'
    description = 'Build all swf versions'
}

tasks.create(name: 'makeMobileAir') {
    dependsOn 'init', 'airMobile', 'airApkLin'
    description = 'Build mobile App'
}